// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                String   @id @default(cuid())
    clerk_id          String   @unique
    first_name        String
    last_name         String
    username          String
    profile_image_url String?
    email             String   @unique
    created_at        DateTime @default(now())
    updated_at        DateTime @updatedAt

    enrollments          Enrollment[]
    UserSubTopicProgress UserSubTopicProgress[]
}

model Course {
    id          String   @id @default(cuid())
    title       String
    description String?
    imageUrl    String?
    price       Int?
    offline     Boolean  @default(false)
    isPublished Boolean  @default(false)
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    topics      Topic[]
    enrollments Enrollment[]
}

model Topic {
    id         String   @id @default(cuid())
    title      String
    position   Int
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    course_id String
    course    Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

    subTopics SubTopic[]
}

enum SubTopicType {
    VIDEO
    CODING_QUESTION
    PROJECT
}

model SubTopic {
    id       String       @id @default(cuid())
    title    String
    type     SubTopicType @default(VIDEO)
    position Int
    isFree   Boolean      @default(false)

    imageUrl String?
    videoUrl String?

    question  String?
    testCases Json?

    projectMarkdown String?

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    topic_id             String
    topic                Topic                  @relation(fields: [topic_id], references: [id], onDelete: Cascade)
    UserSubTopicProgress UserSubTopicProgress[]

    @@map("SubTopic")
}

model UserSubTopicProgress {
    id      String @id @default(cuid())
    user_id String
    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

    subtopic_id String
    subtopic    SubTopic @relation(fields: [subtopic_id], references: [id], onDelete: Cascade)

    completed_at DateTime @default(now())

    @@unique([user_id, subtopic_id])
}

model Enrollment {
    id         String   @id @default(cuid())
    user_id    String
    course_id  String
    created_at DateTime @default(now())
    expires_at DateTime

    user   User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

    @@unique([user_id, course_id])
    @@index([user_id])
    @@map("Enrollment")
}
